// Muestra parcial del c√≥digo de Bot para Whatsapp
// Para cualquier informaci√≥n adicional contactarse a lucascapiz.contacto@gmail.com


const { GoogleSpreadsheet } = require('google-spreadsheet');

const {
    createBot,
    createProvider,
    createFlow,
    addKeyword,
    addAnswer,
    addAction,
    EVENTS,
} = require('@bot-whatsapp/bot')

const fs = require('fs');
const RESPONSES_SHEET_ID = 'ID'; //Aqu√≠ pondras el ID de tu hoja de Sheets
const doc = new GoogleSpreadsheet(RESPONSES_SHEET_ID);
const CREDENTIALS = JSON.parse(fs.readFileSync('./credenciales.json'));
const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const MySQLAdapter = require('@bot-whatsapp/database/mysql')


let STATUS = {}   // Variable para GoogleSheets
let STATE = true; // Variable de estado del bot

const flowEnvio = addKeyword(['si', 'no', '1', '2'])

    // Funcion para apagar el bot
    .addAction(async () => {
        STATE = false
    })
    .addAnswer(
        '¬øPreferis enviar el celular o acercarte a nuestro local en Tigre? üööüõ†Ô∏è\n\n1Ô∏è‚É£ Lo env√≠o\n2Ô∏è‚É£ Me acerco',
        { capture: true },
        async (ctx, { flowDynamic }) => {


            telefono = ctx.from
            if (ctx.body == 1) {

                envio = STATUS[telefono] = { ...STATUS[telefono], envio: 'Lo env√≠a' }
            }

            else if (ctx.body == 2) {

                envio = STATUS[telefono] = { ...STATUS[telefono], envio: 'Se acerca' }
            } else {

                envio = STATUS[telefono] = { ...STATUS[telefono], envio: ctx.body }
            }

            ingresarDatos();
            async function ingresarDatos() {
                console.log(STATUS[telefono].modelo)
                let rows = [{

                    Cliente: STATUS[telefono].cliente,
                    Marca: STATUS[telefono].marca,
                    Modelo: STATUS[telefono].modelo,
                    Problema: STATUS[telefono].problema,
                    Localidad: STATUS[telefono].localidad,
                    Envio: STATUS[telefono].envio,
                    Telefono: STATUS[telefono].telefono,

                }];

                await doc.useServiceAccountAuth({
                    client_email: CREDENTIALS.client_email,
                    private_key: CREDENTIALS.private_key
                });
                await doc.loadInfo();
                let sheet = doc.sheetsByIndex[0];
                for (let index = 0; index < rows.length; index++) {
                    const row = rows[index];
                    await sheet.addRow(row);
                }
            }

            return flowDynamic('Un placer haber sido de ayuda, en breve se estar√° conectando un agente')
        });


const flowLocalidad = addKeyword(['a', 'e', 'i', 'o', 'u', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']).addAnswer(
    '¬øVivis en Buenos Aires? üåÜ üåÜ\n\n1Ô∏è‚É£ Si\n2Ô∏è‚É£ No',
    { capture: true },

    async (ctx, { flowDynamic }) => {

        telefono = ctx.from

        if (ctx.body == 1) {
            localidad = STATUS[telefono] = { ...STATUS[telefono], localidad: 'Vive Buenos Aires' };
        } else if (ctx.body == 2) {
            localidad = STATUS[telefono] = { ...STATUS[telefono], localidad: 'Otra localidad' };
        } else {
            localidad = STATUS[telefono] = { ...STATUS[telefono], localidad: ctx.body };
        }

        // if (ctx.body == 1) {

        //     localidad = STATUS[telefono] = { ...STATUS[telefono], localidad: 'Vive Buenos Aires' }
        // }
        // if (ctx.body == 2) {

        //     localidad = STATUS[telefono] = { ...STATUS[telefono], localidad: 'Otra localidad' }

        // } else {
        //     localidad = STATUS[telefono] = { ...STATUS[telefono], localidad: ctx.body };
        // }

        flowDynamic()

    }, [flowEnvio])

const flowModelo = addKeyword(['a', 'e', 'i', 'o', 'u', '1', '2', '3', '4', '5', '6']).addAnswer(
    'Entiendo, y qu√© modelo es? ü§î\n\nüìù Ejemplo: *Galaxy J7*',
    { capture: true },

    async (ctx, { flowDynamic }) => {


        telefono = ctx.from
        modelo = STATUS[telefono] = { ...STATUS[telefono], modelo: ctx.body }


        flowDynamic()
    }, [flowLocalidad])


const flowMarca = addKeyword(['a', 'e', 'i', 'o', 'u']).addAnswer(
    'üìù Escribe el n√∫mero que corresponda a la marca de celular que tienes üì≤ \n\n1Ô∏è‚É£ *Samsung*\n2Ô∏è‚É£ *Motorola*\n3Ô∏è‚É£ *Iphone*\n4Ô∏è‚É£ *Huawei*\n5Ô∏è‚É£ *Xiaomi*\n6Ô∏è‚É£ *Otro*',
    { capture: true },

    async (ctx, { flowDynamic }) => {


        telefono = ctx.from

        if (ctx.body == 1) {

            marca = STATUS[telefono] = { ...STATUS[telefono], marca: 'Samsung' }
        }
        if (ctx.body == 2) {

            marca = STATUS[telefono] = { ...STATUS[telefono], marca: 'Motorola' }
        }
        if (ctx.body == 3) {

            marca = STATUS[telefono] = { ...STATUS[telefono], marca: 'Iphone' }
        }
        if (ctx.body == 4) {

            marca = STATUS[telefono] = { ...STATUS[telefono], marca: 'Huawei' }
        }
        if (ctx.body == 5) {

            marca = STATUS[telefono] = { ...STATUS[telefono], marca: 'Xiaomi' }
        }
        if (ctx.body == 6) {

            marca = STATUS[telefono] = { ...STATUS[telefono], marca: 'Otro' }
        }

        flowDynamic()
    }, [flowModelo])


const flowCliente = addKeyword(['lg', 'pixel', 'sony', '2', '3', 'ok', 'chip', 'sim', 'cable', 'pin', 'carga', 'coso', 'sucio', 'boton', 'botones', 'id', 'face', 'lector', 'camara', 'zoom', 'audio', 'microfono', 'altavoz', 'altavoces', 'sonido']).addAnswer('Ya casi terminamos ‚úÖü´°')

    .addAnswer(
        '¬øCu√°l es tu nombre y tu apellido? üìùüë§',
        { capture: true },

        async (ctx, { flowDynamic }) => {


            telefono = ctx.from
            cliente = STATUS[telefono] = { ...STATUS[telefono], cliente: ctx.body }                //‚û°Ô∏è Variable del STATUS
            telefono = STATUS[telefono] = { ...STATUS[telefono], telefono: ctx.from }

            flowDynamic()
        }, [flowMarca])



/////////////////////////////////////////////////////////////////////////////      FIN PEDIR DATOS ESTADO DE REPARACION        //////////////////////////////////////////////////////////////////////////////////////////////////////    



const flowOrdenN = addKeyword(['a', 'e', 'i', 'o', 'u', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])

    // Funcion para apagar el bot
    .addAction(async () => {
        STATE = false
    })
    .addAnswer('Qu√© n√∫mero de orden figura en tu boleta? üìùüë§',

        { capture: true },

        async (ctx, { flowDynamic }) => {


            telefono = ctx.from

            return flowDynamic('Un placer haber sido de ayuda, en breve se estar√° conectando un agente')

        })


const flowEquipoRevisado = addKeyword(['a', 'e', 'i', 'o', 'u'])

    .addAnswer('Por favor facilitame el nombre del equipo que nos trajiste üìùüë§', null, null, [flowOrdenN])


const flowCliente3 = addKeyword('3')

    .addAnswer('¬øCu√°l es tu nombre y tu apellido? üìùüë§', null, null, [flowEquipoRevisado])



/////////////////////////////////////////////////////////////////////////////      FIN PEDIDO DE DATOS PARA GREMIO        //////////////////////////////////////////////////////////////////////////////////////////////////////    



const flowGremio = addKeyword(['a', 'e', 'i', 'o', 'u'])

    // Funcion para apagar el bot
    .addAction(async () => {
        STATE = false
    })
    .addAnswer('Contame un poco como te puedo ayudar con respecto al gremio o temas relacionados üìùüë§',

        { capture: true },

        async (ctx, { flowDynamic }) => {


            telefono = ctx.from 

            return flowDynamic('Un placer haber sido de ayuda, en breve se estar√° conectando un agente')

        })


const flowLocalidad2 = addKeyword(['a', 'e', 'i', 'o', 'u'])

    .addAnswer('¬øDe d√≥nde sos? üìùüë§', null, null, [flowGremio])


const flowCliente2 = addKeyword('2')

    .addAnswer('¬øCu√°l es tu nombre y tu apellido? üìùüë§', null, null, [flowLocalidad2])



/////////////////////////////////////////////////////////////////////////////      FIN PROBLEMA        //////////////////////////////////////////////////////////////////////////////////////////////////////    



const flowProblema = addKeyword('otros')

    .addAnswer('üòä Estoy para escucharte y ofrecerte la mejor soluci√≥n posible üí™\n\n¬°Adelante! üëÇüèΩ Contame m√°s detalles sobre el inconveniente que est√°s experimentando!',

        { capture: true },
        async (ctx, { flowDynamic }) => {

            telefono = ctx.from
            problema = STATUS[telefono] = { ...STATUS[telefono], problema: ctx.body }

            flowDynamic()
        }, [flowCliente])


const flowFoto = addKeyword(['1', '2', '3'])

    .addAnswer('üì∑ Mandame una foto de tu celular con la pantalla prendida y otro con la pantalla apagada, eso nos ayudara a saber como se encuentra y as√≠ ver la mejor soluci√≥n üí™\n\n‚úçÔ∏è Una vez que termines escrib√≠ *OK*',

        null, null, [flowCliente])



/////////////////////////////////////////////////////////////////////////////      FIN PANTALLA        //////////////////////////////////////////////////////////////////////////////////////////////////////    



const flowPantalla = addKeyword(['Pantalla', '1'])

    .addAnswer(
        '¬°Gracias por la informaci√≥n! üòä\nParece que la falla est√° relacionada con la pantalla, contame como esta: üì±üëÜ:\n\n1Ô∏è‚É£ Astillada ( Elegir si la imagen y el t√°ctil funcionan a la perfecci√≥n\n2Ô∏è‚É£ No me da imagen, est√° blanca o verde, pero nunca se me golpe√≥\n3Ô∏è‚É£ Se me rompi√≥ completamente debido a un golpe\n\nü§ñ Si la falla no corresponde con ninguna de las opciones, no te preocupes.¬°Simplemente escribe *otros*! Estoy aqu√≠ para escuchar y resolver cualquier problema que puedas tener. üòäüí¨',

        { capture: true },
        async (ctx, { flowDynamic, fallBack }) => {

            telefono = ctx.from
            if (ctx.body == 1) {

                problema = STATUS[telefono] = { ...STATUS[telefono], problema: 'Pantalla astillada' }
            }
            else if (ctx.body == 2) {

                problema = STATUS[telefono] = { ...STATUS[telefono], problema: 'Problemas con la imagen' }

            }
            else if (ctx.body == 3) {

                problema = STATUS[telefono] = { ...STATUS[telefono], problema: 'Pantalla rota debido un golpe' }

            }
            else if (ctx.body.includes('otros')) {

            } else {
                return fallBack()
            }

            flowDynamic()
        }, [flowFoto, flowProblema])



//////////////////////////////////////////////////////////////////////      FIN PRINCIPALES        //////////////////////////////////////////////////////////////////////////////////////////////////////    



const flowCursos = addKeyword('4')

    // Funcion para apagar el bot
    .addAction(async () => {
        STATE = false
    })

    .addAnswer('üìö ¬°Tenemos varios cursos y capacitaciones disponibles para empresas üíº ! Tanto en formato online como presencial.\n\nSe acerca la fecha de los pr√≥ximos congresos en M√©xico üá≤üáΩ y Uruguay üá∫üáæ! üéìüåü')

    .addAnswer('Seguinos en nuestras redes para ver toda la info! üòâ\n\nüì∑ Instagram: @Instagram.ok\nüì± Tiktok: @CuentaTiktok')


const flowTelefono = addKeyword(['Problemas con mi telefono', '1'])


    .addAnswer('üí¨ Estoy para ayudarte, tu celular tiene alg√∫n problema relacionado con alguno de estos temas?\n\n1Ô∏è‚É£ Problemas con mi pantalla ( Somos especialistas )\n2Ô∏è‚É£ Quiero cambiar la bater√≠a de mi tel√©fono\n3Ô∏è‚É£ Problemas relacionados a carga o fallas electr√≥nicas',

        { capture: true },
        async (ctx, { flowDynamic, fallBack }) => {


            telefono = ctx.from
            if (ctx.body == 1) {

            } else if (ctx.body == 2) {

                problema = STATUS[telefono] = { ...STATUS[telefono], problema: 'Quiere cambiar la bater√≠a' }

            } else if (ctx.body == 3) {

                problema = STATUS[telefono] = { ...STATUS[telefono], problema: 'Relacionado a carga o fallas electr√≥nicas' }

            } else {
                return fallBack()
            }

            flowDynamic()
        }, [flowPantalla, flowCliente])



//////////////////////////////////////////////////////////////////////      FIN BIENVENIDA        //////////////////////////////////////////////////////////////////////////////////////////////////////    


// flowPrincipal
//-----------------------------------------------------------------------------------
//        1.flowTelefono
//                1.2.flowPantalla
//                    1.3.flowFoto
//                        1.4.flowCliente
//                            1.5.flowMarca
//                                1.6.flowModelo
//                                    1.7.flowLocalidad
//                                        1.8.flowEnvio ( FUNCIONAL )
//-----------------------------------------------------------------------------------
//        2.flowCliente2
//             2.1.flowLocalidad2
//                 2.2.flowGremio
//                     Fin ( FUNCIONAL )
//-----------------------------------------------------------------------------------
//        3.flowCliente3
//                     3.1.flowEquipoRevisado
//                          3.2.flowOrdenN
//                                  Fin ( FUNCIONAL )
//-----------------------------------------------------------------------------------
//        4.flowCursos
//                     Fin ( FUNCIONAL )
//-----------------------------------------------------------------------------------


// Si se termina CUALQUIER flujo el bot se apaga


const flowEncender = addKeyword('encender')
.addAction(async ()=> {
    STATE = true
})
.addAnswer('Bot encendido...')

const flowPrincipal = addKeyword([EVENTS.WELCOME, 'hola'])

    // Funcion para apagar el bot

    .addAction(async (_, { endFlow }) => {
        if (!STATE) return endFlow()
    })

    .addAnswer('Hola! üëã Soy el chatbot de Empresa de Celulares üì±\nTu lugar de confianza para resolver los problemas de tu celular\n\nüìç Nos ubicamos en Escalada 2245, Local 20, Galer√≠a La Plata, Tigre, CP 1018\n\nüïö Nuestro horario de atenci√≥n es de 10 a 22hs, de Lunes a S√°bado\n\nüòäüíº¬øEn qu√© tipo de consulta puedo ayudarte hoy? \nüí¨ No dudes en compartir tus inquietudes y juntos encontraremos la mejor soluci√≥n para tu dispositivo ¬°Estamos aqu√≠ para asistirte!')

    .addAnswer('*IMPORTANTE!* En este momento te est√° atendiendo un chatbot especializado, pero quedate tranquilo que ser√°s atentido por Mat√≠as. Este solo es un peque√±o paso para acelerar tu consulta y que tengas la mejor experiencia posible üòä', {
        delay: 500,
    })
    .addAnswer('‚úçÔ∏è Escrib√≠ el n√∫mero de la opci√≥n que corresponda üîé\n\n1Ô∏è‚É£ Problemas en mi tel√©fono\n2Ô∏è‚É£ Atenci√≥n al gremio\n3Ô∏è‚É£ Quisiera saber el estado de mi reparaci√≥n\n4Ô∏è‚É£ Info acerca de cursos', { capture: true, delay: 700 }, (ctx, { fallBack }) => {
        if (ctx.body == 1 || ctx.body == 2 || ctx.body == 3 || ctx.body == 4) {

        } else {
            return fallBack()
        }
    }, [flowTelefono, flowCliente2, flowCliente3, flowCursos])


const main = async () => {

    // Nos conectamos a Mysql
    const adapterDB = new MySQLAdapter({
        host: 'HOSTNAME',
        user: 'USER',
        database: 'DATABASE',
        password: 'CONTRASE√ëA',
        port: '3306',
    })

    const adapterFlow = createFlow([flowPrincipal,flowEncender])
    const adapterProvider = createProvider(BaileysProvider, {
        accountSid: process.env.ACC_SID,
        authToken: process.env.ACC_TOKEN,
        vendorNumber: process.env.ACC_VENDOR,
    })

    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })

    QRPortalWeb()

}

main()
